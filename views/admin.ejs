<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - MasterHosting</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .admin-container {
            max-width: 1200px;
            margin: 100px auto 50px;
            padding: 20px;
        }
        
        .admin-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
        }
        
        .admin-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .stat-card h3 {
            color: #667eea;
            margin-bottom: 10px;
        }
        
        .stat-card .number {
            font-size: 2.5rem;
            font-weight: bold;
            color: #333;
        }
        
        .admin-section {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .admin-section h2 {
            color: #667eea;
            margin-bottom: 20px;
        }
        
        .user-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .user-table th,
        .user-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        
        .user-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #667eea;
        }
        
        .user-table tr:hover {
            background: #f8f9fa;
        }
        
        .btn-delete {
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
        }
        
        .btn-delete:hover {
            background: #c82333;
        }
        
        .create-user-form {
            display: grid;
            gap: 15px;
            max-width: 500px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-group label {
            margin-bottom: 5px;
            font-weight: 500;
            color: #333;
        }
        
        .form-group input {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
        }
        
        .loading {
            text-align: center;
            padding: 50px;
            color: #667eea;
        }
        
        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .no-access {
            text-align: center;
            padding: 100px 20px;
        }
        
        .no-access h2 {
            color: #dc3545;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="container">
            <div class="nav-wrapper">
                <a href="/" class="logo">
                    <i class="fas fa-server"></i>
                    <span>MasterHosting</span>
                </a>
                
                <ul class="nav-menu">
                    <li><a href="/">Home</a></li>
                    <li><a href="/admin">Admin</a></li>
                </ul>
                
                <div class="auth-section">
                    <div id="userInfo" class="user-info" style="display: none;">
                        <img id="userPhoto" src="" alt="User" class="user-photo">
                        <div class="user-details">
                            <span id="userName" class="user-name"></span>
                            <button onclick="signOutUser()" class="btn-logout">
                                <i class="fas fa-sign-out-alt"></i> Logout
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <div id="loadingScreen" class="loading">
        <i class="fas fa-spinner fa-spin fa-3x"></i>
        <p>Loading admin dashboard...</p>
    </div>

    <div id="noAccessScreen" class="no-access" style="display: none;">
        <h2><i class="fas fa-lock"></i> Access Denied</h2>
        <p>You must be logged in as an admin to access this page.</p>
        <a href="/login" class="btn btn-primary">Login</a>
    </div>

    <div id="adminContent" class="admin-container" style="display: none;">
        <div class="admin-header">
            <h1><i class="fas fa-user-shield"></i> Admin Dashboard</h1>
            <p>Manage users and monitor your MasterHosting platform</p>
        </div>

        <div class="admin-stats">
            <div class="stat-card">
                <h3><i class="fas fa-users"></i> Total Users</h3>
                <div class="number" id="totalUsers">0</div>
            </div>
            <div class="stat-card">
                <h3><i class="fas fa-user-plus"></i> New Today</h3>
                <div class="number" id="newToday">0</div>
            </div>
            <div class="stat-card">
                <h3><i class="fas fa-server"></i> Active Hosting</h3>
                <div class="number" id="activeHosting">0</div>
            </div>
        </div>

        <div class="admin-section">
            <h2><i class="fas fa-user-plus"></i> Create New User</h2>
            <div id="createMessage"></div>
            <form id="createUserForm" class="create-user-form">
                <div class="form-group">
                    <label for="newUserEmail">
                        <i class="fas fa-envelope"></i> Email
                    </label>
                    <input type="email" id="newUserEmail" placeholder="user@example.com" required>
                </div>
                <div class="form-group">
                    <label for="newUserPassword">
                        <i class="fas fa-lock"></i> Password
                    </label>
                    <input type="password" id="newUserPassword" placeholder="Min 6 characters" required minlength="6">
                </div>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-user-plus"></i> Create User
                </button>
            </form>
        </div>

        <div class="admin-section">
            <h2><i class="fas fa-users"></i> All Users</h2>
            <div id="usersLoading" class="loading">
                <i class="fas fa-spinner fa-spin"></i> Loading users...
            </div>
            <table id="usersTable" class="user-table" style="display: none;">
                <thead>
                    <tr>
                        <th>Email</th>
                        <th>User ID</th>
                        <th>Created</th>
                        <th>Last Sign In</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                </tbody>
            </table>
        </div>
    </div>

    <script type="module" src="/js/firebase-config.js"></script>
    <script src="/js/main.js"></script>
    
    <script type="module">
    import { getAuth, onAuthStateChanged, createUserWithEmailAndPassword } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';
    import { getFirestore, collection, getDocs, doc, setDoc, deleteDoc, query, orderBy } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';

    function waitForAuth() {
        return new Promise((resolve) => {
            const check = () => {
                if (window.firebaseAuth) {
                    resolve(window.firebaseAuth);
                } else {
                    setTimeout(check, 100);
                }
            };
            check();
        });
    }

    const auth = await waitForAuth();
    const db = getFirestore();
    
    const ADMIN_EMAILS = ['a.tormen2012@gmail.com', 'gogojohnny745@gmail.com'];

    onAuthStateChanged(auth, async (user) => {
        const loadingScreen = document.getElementById('loadingScreen');
        const noAccessScreen = document.getElementById('noAccessScreen');
        const adminContent = document.getElementById('adminContent');
        
        if (!user) {
            loadingScreen.style.display = 'none';
            noAccessScreen.style.display = 'block';
            return;
        }
        
        if (!ADMIN_EMAILS.includes(user.email)) {
            loadingScreen.style.display = 'none';
            noAccessScreen.style.display = 'block';
            return;
        }
        
        loadingScreen.style.display = 'none';
        adminContent.style.display = 'block';
        
        await loadUsers();
        await loadStats();
    });

    async function loadUsers() {
        const usersLoading = document.getElementById('usersLoading');
        const usersTable = document.getElementById('usersTable');
        const usersTableBody = document.getElementById('usersTableBody');
        
        try {
            const usersSnapshot = await getDocs(collection(db, 'users'));
            usersTableBody.innerHTML = '';
            
            if (usersSnapshot.empty) {
                usersTableBody.innerHTML = '<tr><td colspan="5" style="text-align: center;">No users found</td></tr>';
            } else {
                usersSnapshot.forEach((doc) => {
                    const userData = doc.data();
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${userData.email || 'N/A'}</td>
                        <td><code>${doc.id}</code></td>
                        <td>${userData.createdAt ? new Date(userData.createdAt).toLocaleDateString() : 'N/A'}</td>
                        <td>${userData.lastSignIn ? new Date(userData.lastSignIn).toLocaleDateString() : 'Never'}</td>
                        <td>
                            <button class="btn-delete" onclick="deleteUser('${doc.id}', '${userData.email}')">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </td>
                    `;
                    usersTableBody.appendChild(row);
                });
            }
            
            usersLoading.style.display = 'none';
            usersTable.style.display = 'table';
        } catch (error) {
            console.error('Error loading users:', error);
            usersTableBody.innerHTML = '<tr><td colspan="5" style="text-align: center; color: red;">Error loading users</td></tr>';
        }
    }

    async function loadStats() {
        try {
            const usersSnapshot = await getDocs(collection(db, 'users'));
            document.getElementById('totalUsers').textContent = usersSnapshot.size;
            
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            let newToday = 0;
            
            usersSnapshot.forEach((doc) => {
                const userData = doc.data();
                if (userData.createdAt) {
                    const createdDate = new Date(userData.createdAt);
                    if (createdDate >= today) {
                        newToday++;
                    }
                }
            });
            
            document.getElementById('newToday').textContent = newToday;
            document.getElementById('activeHosting').textContent = '0';
        } catch (error) {
            console.error('Error loading stats:', error);
        }
    }

    document.getElementById('createUserForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const email = document.getElementById('newUserEmail').value;
        const password = document.getElementById('newUserPassword').value;
        const messageEl = document.getElementById('createMessage');
        const submitBtn = e.target.querySelector('button[type="submit"]');
        
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';
        
        try {
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            
            await setDoc(doc(db, 'users', userCredential.user.uid), {
                email: email,
                createdAt: new Date().toISOString(),
                createdBy: 'admin',
                role: 'user'
            });
            
            messageEl.innerHTML = '<div class="success-message"><i class="fas fa-check-circle"></i> User created successfully!</div>';
            document.getElementById('createUserForm').reset();
            
            await loadUsers();
            await loadStats();
            
            setTimeout(() => { messageEl.innerHTML = ''; }, 5000);
        } catch (error) {
            let errorMessage = 'Failed to create user.';
            if (error.code === 'auth/email-already-in-use') errorMessage = 'Email already in use.';
            else if (error.code === 'auth/weak-password') errorMessage = 'Password too weak.';
            
            messageEl.innerHTML = '<div class="error-message"><i class="fas fa-exclamation-circle"></i> ' + errorMessage + '</div>';
        }
        
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-user-plus"></i> Create User';
    });

    window.deleteUser = async function(userId, email) {
        if (!confirm('Are you sure you want to delete user: ' + email + '?')) {
            return;
        }
        
        try {
            await deleteDoc(doc(db, 'users', userId));
            alert('User deleted from database. Note: Firebase Auth user still exists.');
            await loadUsers();
            await loadStats();
        } catch (error) {
            console.error('Error deleting user:', error);
            alert('Failed to delete user: ' + error.message);
        }
    };
    </script>
</body>
</html>
